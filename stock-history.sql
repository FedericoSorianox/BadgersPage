-- 1. Crear la tabla para el historial de stock
CREATE TABLE stock_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_id UUID REFERENCES productos(id) ON DELETE CASCADE,
  stock_date DATE NOT NULL,
  quantity INT NOT NULL,
  UNIQUE(product_id, stock_date) -- Asegura que solo hay un registro por producto y día
);

-- Habilitar RLS
ALTER TABLE stock_history ENABLE ROW LEVEL SECURITY;

-- Política de acceso para administradores
CREATE POLICY "Allow admins full access" ON stock_history
FOR ALL
USING (auth.role() = 'service_role' OR public.is_admin(auth.uid()))
WITH CHECK (auth.role() = 'service_role' OR public.is_admin(auth.uid()));


-- 2. Crear la función que se ejecutará con el trigger
CREATE OR REPLACE FUNCTION public.log_stock_change()
RETURNS TRIGGER AS $$
BEGIN
  -- Inserta o actualiza el registro de stock para el producto en la fecha actual
  INSERT INTO public.stock_history (product_id, stock_date, quantity)
  VALUES (NEW.id, NOW()::date, NEW.stock)
  ON CONFLICT (product_id, stock_date)
  DO UPDATE SET quantity = EXCLUDED.quantity;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- 3. Crear el trigger en la tabla de productos
CREATE TRIGGER on_stock_update
AFTER UPDATE OF stock ON public.productos
FOR EACH ROW
EXECUTE FUNCTION public.log_stock_change(); 